==== Client States ====
 1) Init:       When logged out
 2) Logged:     When logged to the server but not playing
 3) Playing:    When logged and playing a chess game


==== Arguments types ====
username: String representing a username uniquely identifying a student. Each student
          can only be simultaneously logged once on the server.

challenge: a 52 chars long hex representation of a sha1() hash composed of the actual
           password and the salt provided by the server.

msg: A plain string explaining why the nack occured

white,
black,
timers: The number of seconds in the clocks

from,
to: chess positions in algebraid notation (e.g. b4)

promotion: a capital letter indicating the piece type
           (R: rook, N: Knight, Q: queen, B: Bishop)

salt: a string generated randomly for each server connections

winner: The color of the winner "white"/"black"

==== Server Commands ====

=== Status: Init ===
command:     <auth><login username=".." challenge=".." /></auth>
reply:       <ack /> / <nack msg=".." />
status:      Init => Logged
description: challenge is sha1(password+salt). salt is transmitted by the server
             within the <hello> command


=== Status: Logged ===
command:    <auth><logout /></auth>
reply:      <ack /> / <nack msg=".." />
status:     Logged => Init

command:    <games><create timers=".." /></games>
reply:      <ack /> / <nack msg=".." />
status:     Logged => Playing

command:    <games><join username=".." timers=".." /></games>
reply:      <ack /> / <nack msg=".." />
status:     Logged => Playing
comment:    The server will then send a <game><joined username=".." timers=".." /></game> to the host

command:    <games><list /></games>
reply:      <games><game username=".." />..</games>
status:

=== Status: Playing ===
command:    <game username=".."><timers /></game>
out:        <game username=".."><timers white=".." black=".." /></game>

command:    <game username=".."><move from=".." to=".."/></game>
reply:      <ack /> / <nack msg=".." />

command:    <game username=".."><movepromote from=".." to=".." promotion=".."/></game>
reply:      <ack /> / <nack msg=".." />

command:    <game username=".."><drawask /></game>
reply:      <ack /> / <nack msg=".." />
comment:    If a draw can be requested (not enought material for checkmate, 50 moves
            rules or 3 similar conditions) the draw will be accepted without asking
            the opponent.

command:    <game username=".."><drawaccept /></game>
reply:      <ack /> / <nack msg=".." />
comment:    You can only accept a draw immediately after recieving a draw request

command:    <game username=".."><drawdecline /></game>
reply:      <ack /> / <nack msg=".." />
comment:    You can only decline a draw immediately after recieving a draw request

command:    <game username=".."><resign /></game>
reply:      <ack /> / <nack msg=".." />

==== Replies received from the server ====

=== On connection: ===

    <hello salt=".." />

=== When hosting a game: ===
When you host, you'll receive a notification once the opponent joins your game,
then game will then automatically start.

    <game><joined username=".." /></game>

=== When playing a game: ===
You'll receive a notification of the opponents moves and actions. [username] 
contains the opponent username.

    <game username=".."><move from=".." to=".."/></game>
    <game username=".."><movepromote from=".." to=".." promotion=".."/></game>
    <game username=".."><drawask /></game>
    <game username=".."><drawdecline /></game>

On game end:

    <game username=".."><end winner=".." /></game>
    <game username=".."><draw /></game>

==== Chatting ====
You can chat when logged or playing.

command:    <chat username=".."><msg>..</msg></chat>
reply:      <ack /> / <nack msg=".." />

Received from server when somebody writes to you:

    <chat username=".."><msg>..</msg></chat>

